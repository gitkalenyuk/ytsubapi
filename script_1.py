# –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ regex —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ CSV —Ñ–∞–π–ª–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
import csv
import io

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä–µ–º–æ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
files_to_create = {}

# 1. main.py - –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–¥
main_py_fixed = '''from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import PlainTextResponse
from fastapi.middleware.cors import CORSMiddleware
import re
from pytubefix import YouTube
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="YouTube Subtitles API",
    description="API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –∑ YouTube –≤—ñ–¥–µ–æ",
    version="1.0.0"
)

# –î–æ–¥–∞—î–º–æ CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def extract_video_id(url: str) -> str:
    """–í–∏—Ç—è–≥—É—î ID –≤—ñ–¥–µ–æ –∑ YouTube URL"""
    patterns = [
        r'(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)',
        r'youtube\\.com\\/watch\\?.*v=([^&\\n?#]+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    
    raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π YouTube URL")

@app.get("/")
async def root():
    return {
        "message": "YouTube Subtitles API", 
        "version": "1.0.0",
        "endpoints": {
            "/subtitles": "GET - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤",
            "/health": "GET - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É API"
        }
    }

@app.get("/health")
async def health():
    return {"status": "ok", "message": "API –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ"}

@app.get("/subtitles", response_class=PlainTextResponse)
async def get_subtitles(
    url: str = Query(..., description="YouTube URL –≤—ñ–¥–µ–æ"),
    lang: str = Query("en", description="–ú–æ–≤–∞ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ (en, uk, it, auto —Ç–æ—â–æ)")
):
    """
    –û—Ç—Ä–∏–º—É—î —Å—É–±—Ç–∏—Ç—Ä–∏ –∑ YouTube –≤—ñ–¥–µ–æ
    
    Args:
        url: YouTube URL
        lang: –ú–æ–≤–∞ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'en')
    
    Returns:
        –¢–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ —É plain text —Ñ–æ—Ä–º–∞—Ç—ñ
    """
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –¥–ª—è URL: {url}, –º–æ–≤–∞: {lang}")
        
        # –í–∏—Ç—è–≥—É—î–º–æ ID –≤—ñ–¥–µ–æ
        video_id = extract_video_id(url)
        logger.info(f"Video ID: {video_id}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ YouTube –æ–±'—î–∫—Ç
        yt = YouTube(url)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
        captions = yt.captions
        
        if not captions:
            raise HTTPException(status_code=404, detail="–°—É–±—Ç–∏—Ç—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –≤—ñ–¥–µ–æ")
        
        # –®—É–∫–∞—î–º–æ —Å—É–±—Ç–∏—Ç—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é –º–æ–≤–æ—é
        caption = None
        
        # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —Ç–æ—á–Ω—É –º–æ–≤—É
        if lang in captions:
            caption = captions[lang]
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –∞–≤—Ç–æ—Å—É–±—Ç–∏—Ç—Ä–∏
        elif f"a.{lang}" in captions:
            caption = captions[f"a.{lang}"]
        # –Ø–∫—â–æ lang="auto", –±–µ—Ä–µ–º –ø–µ—Ä—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ
        elif lang == "auto" and captions:
            caption = list(captions.values())[0]
        # Fallback –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É
        elif "en" in captions:
            caption = captions["en"]
        elif "a.en" in captions:
            caption = captions["a.en"]
        
        if not caption:
            available_langs = list(captions.keys())
            raise HTTPException(
                status_code=404, 
                detail=f"–°—É–±—Ç–∏—Ç—Ä–∏ –º–æ–≤–æ—é '{lang}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏: {available_langs}"
            )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
        subtitle_text = caption.generate_srt_captions()
        
        logger.info("–°—É–±—Ç–∏—Ç—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ")
        
        # –û—á–∏—â—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ —Ç–∞–π–º-–∫–æ–¥—ñ–≤ (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç)
        lines = subtitle_text.split('\\n')
        clean_text = []
        
        for line in lines:
            line = line.strip()
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–æ–º–µ—Ä–∏, —Ç–∞–π–º-–∫–æ–¥–∏ —Ç–∞ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏
            if (line and 
                not line.isdigit() and 
                not '-->' in line and 
                not re.match(r'^\\d+$', line)):
                clean_text.append(line)
        
        result = ' '.join(clean_text)
        
        if not result.strip():
            raise HTTPException(status_code=404, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä—ñ–≤")
        
        return result
        
    except ValueError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ URL: {e}")
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@app.get("/subtitles/info")
async def get_video_info(url: str = Query(..., description="YouTube URL –≤—ñ–¥–µ–æ")):
    """
    –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—É–±—Ç–∏—Ç—Ä–∏
    """
    try:
        video_id = extract_video_id(url)
        yt = YouTube(url)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–µ–æ
        video_info = {
            "title": yt.title,
            "author": yt.author,
            "length": yt.length,
            "views": yt.views,
            "video_id": video_id,
            "thumbnail": yt.thumbnail_url
        }
        
        # –î–æ—Å—Ç—É–ø–Ω—ñ —Å—É–±—Ç–∏—Ç—Ä–∏
        captions_info = {}
        for lang_code, caption in yt.captions.items():
            captions_info[lang_code] = {
                "language": caption.name,
                "code": caption.code,
                "auto_generated": caption.code.startswith('a.')
            }
        
        return {
            "video": video_info,
            "available_captions": captions_info
        }
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''

# –ó–∞–ø–∏—Å—É—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ —è–∫ CSV –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
files_data = [
    ["filename", "content"],
    ["main.py", main_py_fixed],
    ["requirements.txt", "fastapi>=0.104.1\nuvicorn[standard]>=0.24.0\npytubefix>=10.0.0\npython-multipart>=0.0.6"],
    ["vercel.json", '{\n  "version": 2,\n  "builds": [\n    {\n      "src": "main.py",\n      "use": "@vercel/python"\n    }\n  ],\n  "routes": [\n    {\n      "src": "/(.*)",\n      "dest": "main.py"\n    }\n  ]\n}'],
    ["README.md", "# YouTube Subtitles API\n\nAPI –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –∑ YouTube –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é pytubefix.\n\n## –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å\n\n- –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –∑ YouTube –≤—ñ–¥–µ–æ\n- –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤\n- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ —Ç–∞–π–º-–∫–æ–¥—ñ–≤\n- –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–µ–æ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—É–±—Ç–∏—Ç—Ä–∏\n\n## Endpoints\n\n### GET /subtitles\n\n–û—Ç—Ä–∏–º—É—î —Å—É–±—Ç–∏—Ç—Ä–∏ –∑ YouTube –≤—ñ–¥–µ–æ.\n\n**–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:**\n- `url` (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π) - YouTube URL –≤—ñ–¥–µ–æ\n- `lang` (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º \"en\") - –º–æ–≤–∞ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤\n\n**–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**\n```\nGET /subtitles?url=https://www.youtube.com/watch?v=dQw4w9WgXcQ&lang=en\n```\n\n**–í—ñ–¥–ø–æ–≤—ñ–¥—å:** Plain text –∑ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"],
    [".gitignore", "__pycache__/\n*.py[cod]\n*$py.class\n*.so\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n.vercel"]
]

# –°—Ç–≤–æ—Ä—é—î–º–æ CSV —Ñ–∞–π–ª –∑ —É—Å—ñ–º–∞ —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç—É
output = io.StringIO()
writer = csv.writer(output)
writer.writerows(files_data)
csv_content = output.getvalue()

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ñ–∞–π–ª
with open('youtube_api_project_files.csv', 'w', encoding='utf-8', newline='') as f:
    f.write(csv_content)

print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤–∏–π! –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª 'youtube_api_project_files.csv' –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏.")
print("\nüìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—é:")
print("1. –°—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏–π GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π")
print("2. –ó–∞–≤–∞–Ω—Ç–∞–∂ —É—Å—ñ —Ñ–∞–π–ª–∏ –∑ CSV –¥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é")
print("3. –£ Vercel –Ω–∞—Ç–∏—Å–Ω–∏ 'Import Project' —ñ –≤–∏–±–µ—Ä–∏ —Å–≤—ñ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π")
print("4. Vercel –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–≥–æ—Ä–Ω–µ API")
print("\nüîó –ü—ñ—Å–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Ç–≤—ñ–π API –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é:")
print("https://your-project-name.vercel.app/subtitles?url=YOUTUBE_URL&lang=uk")